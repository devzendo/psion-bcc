/* Generated by Ctran from factive.cat */
#define FACTIVE_G
#ifndef APPMAN_G
#include <appman.g>
#endif
#ifndef P_FILE_H
#include <p_file.h>
#endif
/* Class Numbers */
#define C_FACTIVE 25
#define C_FSCAN 26
#define C_FNODE 27
#define C_PNODE 28
#define C_PSELVAR 29
#define C_PSEL 30
#define C_FCASY 31
#define C_FCSYNC 32
#define C_FMMK 33
#define C_FMSRC 34
#define C_FMTARG 35
#define C_FMFMT 36
#define C_FMSCAN 37
#define C_FMAN 38
#define C_LOCS 39
/* Method Numbers */
#define O_FMAN_DELETE 4
#define O_FMAN_ERROR 17
#define O_FS_MATCHNAME 7
#define O_LS_MATCHNAME 1
#define O_FS_DIRNAME 10
#define O_PS_SET_PATH 16
#define O_FMAN_NAME 10
#define O_FMAN_FORMAT 9
#define O_PS_SETTAG 20
#define O_FMAN_ATTRIB 12
#define O_FS_END_DIRLIST 12
#define O_FC_REQUEST_COMP 9
#define O_FMAN_FILEEXIST 16
#define O_FN_LIST 7
#define O_FMAN_RENAME 5
#define O_FMAN_UPDATE 15
#define O_FMAN_NEWNAME 14
#define O_PS_SELECT_DIRENTRY 18
#define O_FMAN_COMPLETE 13
#define O_LS_SCAN 2
#define O_PS_DRIVES 19
#define O_FS_FSCAN 8
#define O_FMAN_INFO 11
#define O_PS_NEW_LIST 23
#define O_FC_OPEN 8
#define O_PS_SENSE_FILENAME 17
#define O_PS_GETTAG 21
#define O_FMAN_COPY 3
#define O_PS_DESCEND_PATH 15
#define O_FMAN_MAKE 6
#define O_FMAN_CANCEL 2
#define O_PS_ASCEND_PATH 14
#define O_PS_ORDER 22
#define O_FN_END_LIST 8
#define O_FMAN_REMOVE 7
#define O_FN_NODENAME 9
#define O_FC_WRITE 7
#define O_FS_FILENAME 11
#define O_PS_GET_FILE 13
#define O_LS_FILENAME 3
#define O_FMAN_INIT 1
#define O_FA_CLOSE 6
#define O_FMAN_COPYDEV 8
#define O_FS_FSCAN_END 9
/* Property of factive */
typedef struct {
unsigned char *owner;
} PRS_FACTIVE;
typedef struct pr_factive
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
} PR_FACTIVE;
/* Constants for fscan */
#define FS_WRITABLE P_FAWRITE
#define FS_HIDDEN P_FAHIDDEN
#define FS_SYSTEM P_FASYSTEM
#define FS_DIRECTORIES P_FADIR
#define FS_MODIFIED P_FAMOD
#define FS_ALL_FILES P_FAREAD
#define FS_FILE_TYPE (FS_HIDDEN|FS_SYSTEM)
#define FS_INCLUDE_SUBDIRECTORIES 0x1000
#define FS_INCLUDE 0x2000
#define FS_END_DIRLIST 0x4000
#define FS_PARSE_NAME 0x8000
#define FS_MAX_DIRLEVELS 32
/* Property of fscan */
typedef struct {
unsigned short int flags;
unsigned short int index;
unsigned char *pname;
unsigned char *match;
unsigned char delim[2];
P_INFO finfo;
P_FPARSE crk;
unsigned char *pcbarr[FS_MAX_DIRLEVELS];
unsigned char name[P_FNAMESIZE];
} PRS_FSCAN;
typedef struct pr_fscan
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FSCAN fscan;
} PR_FSCAN;
/* Constants for fnode */
#define FNODE_NODE_ARRAY 0x01
#define FNODE_DEVICE_ARRAY 0x02
#define FNODE_LOCAL_ONLY 0x04
/* Property of fnode */
typedef struct {
unsigned short int flags;
unsigned char *pname;
unsigned char *oldname;
unsigned char *pcb;
} PRS_FNODE;
typedef struct pr_fnode
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FNODE fnode;
} PR_FNODE;
/* Property of pnode */
typedef struct pr_pnode
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FNODE fnode;
} PR_PNODE;
/* Constants for pselvar */
#define PSEL_FLAG_TAG 0x1
#define PSEL_ORDER_NAME 0
#define PSEL_ORDER_TIME 1
#define PSEL_ORDER_DATE 2
#define PSEL_ORDER_SIZE 3
#define PSEL_ORDER_EXT 4
/* Types for pselvar */
typedef struct
{
unsigned short int flags;
unsigned short int namlen;
P_INFO info;
unsigned char name[P_FNAMESIZE];
} PSEL_REC;
/* Property of pselvar */
typedef struct pr_pselvar
{
PRS_ROOT root;
PRS_VAROOT varoot;
PRS_VAFIX vafix;
PRS_VAFLAT vaflat;
} PR_PSELVAR;
/* Constants for psel */
#define PSEL_RESET_DIR_ARRAY 0x01
#define PSEL_RESET_FILE_ARRAY 0x02
#define PSEL_RESET_FSPEC 0x04
#define PSEL_DEVICE_ARRAY 0x10
#define PSEL_DIR_ARRAY 0x20
#define PSEL_FILE_ARRAY 0x40
#define PSEL_DESCEND 0x80
#define PSEL_ASCEND 0x100
#define PSEL_SETPATH 0x200
#define PSEL_INIT 0x400
#define PSEL_SELDIR 0x800
#define PSEL_ANOTHER_CMD 0x1000
#define PSEL_GENERATE_DEF 0x2000
#define PSEL_QUEUED_CMD 0x4000
#define PSEL_CURRENTLY_BUSY (0x100|0x80|0x400|0x200|0x800)
#define PSEL_SET_TAG -1
#define PSEL_CLEAR_TAG 0
#define PSEL_TOGGLE_TAG 1
/* Property of psel */
typedef struct {
PR_PSELVAR *pfile;
PR_VASTR *pdir;
PR_PNODE *pnode;
unsigned short int dirent;
unsigned short int flags;
unsigned short int asccnt;
unsigned short int dirnum;
unsigned char *setpath;
short int builderr;
P_FPARSE fck;
char fspec[P_FNAMESIZE];
} PRS_PSEL;
typedef struct pr_psel
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FSCAN fscan;
PRS_PSEL psel;
} PR_PSEL;
/* Constants for fcasy */
#define FCOPY_DISP_SFTYPE 0x01
#define FCOPY_DISP_SFSIZE 0x02
#define FCOPY_DISP_SFDATE 0x04
#define FCOPY_DISP_SFNAME 0x08
#define FCOPY_DISP_RFTYPE 0x10
#define FCOPY_DISP_RFSIZE 0x20
#define FCOPY_DISP_RFDATE 0x40
#define FCOPY_DISP_RFNAME 0x80
#define FCOPY_DISP_BLKSIZ 0x100
#define FCOPY_DISP_BLKNO 0x200
#define FCOPY_DISP_PROTOCOL 0x400
#define FCASY_READ_QUEUED 0x01
#define FCASY_WRITE_QUEUED 0x02
/* Types for fcasy */
typedef struct
{
unsigned short int flags;
unsigned short int protocol;
unsigned short int blksiz;
unsigned short int blkno;
unsigned short int sftype;
unsigned short int rftype;
unsigned long int sfsize;
unsigned long int rfsize;
unsigned long int sfdate;
unsigned long int rfdate;
unsigned char *sfname;
unsigned char *rfname;
} FCOPY_DISP;
/* Property of fcasy */
typedef struct {
unsigned char *recvname;
unsigned short int flags;
} PRS_FCASY;
typedef struct pr_fcasy
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FCASY fcasy;
} PR_FCASY;
/* Property of fcsync */
typedef struct pr_fcsync
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FCASY fcasy;
} PR_FCSYNC;
/* Property of fmmk */
typedef struct pr_fmmk
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
} PR_FMMK;
/* Property of fmsrc */
typedef struct pr_fmsrc
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FCASY fcasy;
} PR_FMSRC;
/* Property of fmtarg */
typedef struct pr_fmtarg
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FCASY fcasy;
} PR_FMTARG;
/* Constants for fmfmt */
#define FMFMT_NAME 0x01
/* Property of fmfmt */
typedef struct {
unsigned short int rdword;
unsigned short int rdlen;
unsigned short int flags;
} PRS_FMFMT;
typedef struct pr_fmfmt
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FMFMT fmfmt;
} PR_FMFMT;
/* Property of fmscan */
typedef struct pr_fmscan
{
PRS_ROOT root;
PRS_ACTIVE active;
PRS_FACTIVE factive;
PRS_FSCAN fscan;
} PR_FMSCAN;
/* Constants for fman */
#define FMAN_READ_SIZE 0x800
#define FMAN_COPYING 0
#define FMAN_DELETE 1
#define FMAN_RENAME 2
#define FMAN_MAKE 3
#define FMAN_REMOVE 4
#define FMAN_FORMAT 5
#define FMAN_NAME 6
#define FMAN_ATTRIB 7
/* Property of fman */
typedef struct {
PR_FMSRC *srcfile;
PR_FMTARG *targfile;
PR_FMSCAN *fmscan;
PR_FMMK *fmmk;
PR_FMFMT *fmfmt;
unsigned short int action;
unsigned short int mode;
unsigned short int srclen;
FCOPY_DISP dispinfo;
unsigned char targname[P_FNAMESIZE];
unsigned char wildsrcname[P_FNAMESIZE];
unsigned char wildtargname[P_FNAMESIZE];
unsigned char buf[FMAN_READ_SIZE];
} PRS_FMAN;
typedef struct pr_fman
{
PRS_ROOT root;
PRS_FMAN fman;
} PR_FMAN;
/* Constants for locs */
#define LOCS_FLG_ROM 0x1000
#define LOCS_FLG_LOC 0x2000
#define LOCS_FLG_ROOT (0x4000|LOCS_FLG_LOC)
#define LOCS_FLG_ROOT_ONLY 0x4000
/* Property of locs */
typedef struct {
unsigned short int flags;
unsigned char *pcb;
unsigned char *pname;
unsigned char *match;
P_INFO info;
unsigned char name[P_FNAMESIZE];
unsigned char wildname[P_FNAMESIZE];
} PRS_LOCS;
typedef struct pr_locs
{
PRS_ROOT root;
PRS_LOCS locs;
} PR_LOCS;
